<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.net dotnet pact rest api testing on Adam Rodger</title><link>https://adamrodger.com/tags/.net-dotnet-pact-rest-api-testing/</link><description>Recent content in .net dotnet pact rest api testing on Adam Rodger</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 05 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://adamrodger.com/tags/.net-dotnet-pact-rest-api-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Service Evolution with Consumer Driven Contracts and Pact</title><link>https://adamrodger.com/post/2018-07-05-consumer-driven-contracts/</link><pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate><guid>https://adamrodger.com/post/2018-07-05-consumer-driven-contracts/</guid><description>In a microservices architecture with a suite of inter-dependent services, ensuring fast feedback when API changes cause incompatibility becomes a key problem. Any time that incompatible services are deployed to an environment you will have caused a preventable outage that should be detected as part of your usual Continuous Integration solution.
At dunnhumby, we use a squad based approach to application development which sees small &amp;lsquo;vertical&amp;rsquo; teams form with team members representing all of the &amp;lsquo;horizontals&amp;rsquo;, such as API, UI and QA.</description></item></channel></rss>